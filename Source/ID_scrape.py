import json
import re
from playwright.sync_api import sync_playwright, TimeoutError
import time

# siia sulgude sisse kopeerida id_valjavote saadud object_id-d
object_ids = ['1511073',
 '1888965',
 '2005285',
 '2303976',
 '2321504',
 '2344155',
 '2561825',
 '2587858',
 '2666063',
 '2749072',
 '2944869',
 '2945377',
 '2946160',
 '2976214',
 '3042165',
 '3046003',
 '3047651',
 '3048974',
 '3058386',
 '3060907',
 '3070373',
 '3099062',
 '3109898',
 '3125725',
 '3153451',
 '3157199',
 '3158572',
 '3161319',
 '3163262',
 '3170315',
 '3178268',
 '3192001',
 '3196854',
 '3198075',
 '3198841',
 '3201110',
 '3203352',
 '3210527',
 '3222224',
 '3235129',
 '3244505',
 '3246179',
 '3252537',
 '3254500',
 '3256880',
 '3260659',
 '3274135',
 '3291511',
 '3296651',
 '3300002',
 '3307919',
 '3313995',
 '3318047',
 '3333415',
 '3364248',
 '3364613',
 '3369935',
 '3373227',
 '3376480',
 '3379802',
 '3380561',
 '3387644',
 '3395635',
 '3397809',
 '3408651',
 '3410255',
 '3418097',
 '3421570',
 '3435396',
 '3440727',
 '3441272',
 '3442681',
 '3446800',
 '3451649',
 '3459603',
 '3460287',
 '3460419',
 '3460433',
 '3463010',
 '3463733',
 '3466825',
 '3472280',
 '3474819',
 '3484647',
 '3485700',
 '3486133',
 '3522174',
 '3529644',
 '3534124',
 '3534156',
 '3540521',
 '3548746',
 '3550447',
 '3550464',
 '3551200',
 '3551284',
 '3554083',
 '3554437',
 '3556112',
 '3558783',
 '3561158',
 '3564733',
 '3565213',
 '3572275',
 '3578646',
 '3578854',
 '3580565',
 '3582759',
 '3589232',
 '3596143',
 '3601381',
 '3604728',
 '3610088',
 '3612371',
 '3613219',
 '3617466',
 '3618550',
 '3620939',
 '3621757',
 '3623360',
 '3627264',
 '3628632',
 '3631530',
 '3634671',
 '3635652',
 '3636949',
 '3643442',
 '3643701',
 '3647709',
 '3650385',
 '3651071',
 '3651086',
 '3651886',
 '3653857',
 '3654070',
 '3659946',
 '3661040',
 '3665509',
 '3665747',
 '3667513',
 '3668230',
 '3675772',
 '3678099',
 '3679763',
 '3681459',
 '3684738',
 '3686237',
 '3686979',
 '3688082',
 '3691843',
 '3695684',
 '3696698',
 '3699032',
 '3702438',
 '3702569',
 '3704446',
 '3706106',
 '3706579',
 '3706586',
 '3706689',
 '3710029',
 '3710069',
 '3711690',
 '3714989',
 '3716787',
 '3716817',
 '3717734',
 '3718502',
 '3718550',
 '3719083',
 '3719755',
 '3719765',
 '3720506',
 '3720736',
 '3722437',
 '3722641',
 '3723707',
 '3723709',
 '3724025',
 '3724774',
 '3725033',
 '3725076',
 '3726515',
 '3726527',
 '3727451',
 '3729333',
 '3730300',
 '3731560',
 '3731628',
 '3733074',
 '3733522',
 '3733707',
 '3734001',
 '3734390',
 '3734719',
 '3734970',
 '3735937',
 '3735973',
 '3736251',
 '3736338',
 '3736361',
 '3736676',
 '3737020',
 '3737389',
 '3737814',
 '3737821',
 '3737840',
 '3737949',
 '3738738',
 '3739021',
 '3739437',
 '3739810',
 '3739813',
 '3739838',
 '3739888',
 '3739932',
 '3739997',
 '3740344',
 '3740425',
 '3740445',
 '3740461',
 '3740478',
 '3740971',
 '3741054',
 '3741332',
 '3741517',
 '3741822',
 '3741848',
 '3741986',
 '3742353',
 '3742514',
 '3742563',
 '3743043',
 '3743738',
 '3744321',
 '3744395',
 '3744603',
 '3744735',
 '3744781',
 '3744877',
 '3744900',
 '3744976',
 '3745341',
 '3745410',
 '3745452',
 '3745494',
 '3745498',
 '3745535',
 '3745542',
 '3745546',
 '3745559',
 '3745642',
 '3745827',
 '3745936',
 '3745960',
 '3746100',
 '3746144',
 '3746149',
 '3746267',
 '3746537',
 '3746544',
 '3746690',
 '3746734',
 '3747063',
 '3747067',
 '3747145',
 '3747247',
 '3747379',
 '3747725',
 '3747738',
 '3747859',
 '3748094',
 '3748266',
 '3748393',
 '3748467',
 '3748489',
 '3748491',
 '3748495',
 '3748576',
 '3748614',
 '3748630',
 '3748653',
 '3748745',
 '3748767',
 '3748777',
 '3748923',
 '3749040',
 '3749302',
 '3749310',
 '3749492',
 '3749591',
 '3749645',
 '3749818',
 '3749850',
 '3750120',
 '3750190',
 '3750209',
 '3750256',
 '3750345',
 '3750380',
 '3750397',
 '3750402',
 '3750449',
 '3750523',
 '3750540',
 '3750541',
 '3750601',
 '3750613',
 '3750647',
 '3750691',
 '3750728',
 '3750774',
 '3750931',
 '3751031',
 '3751139',
 '3751164',
 '3751171',
 '3751183',
 '3751198',
 '3751243',
 '3751248',
 '3751250',
 '3751251',
 '3751300',
 '3751314',
 '3751377',
 '3751410',
 '3751426',
 '3751432',
 '3751504',
 '3751508'] # siia sulgude sisse kopeerida id_valjavote saadud object_id-d

scraped_data = []

with sync_playwright() as p:
    browser = p.chromium.launch(headless=False, slow_mo=50)
    context = browser.new_context(user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")

    # Küpsis selleks, et saaks läbi lehekülje "anti-bot" süsteemist
    context.add_cookies([{
        'name': 'PHPSESSID',
        'value': '2ti601j7htfs0a9upfc3bc16bq6l5cfd', # PHPSESSID väärtus inspect elemendi alt
        'domain': 'www.kv.ee',
        'path': '/',
        'httpOnly': True,
        'secure': True,
        'sameSite': 'Lax'
    }])

    page = context.new_page()

    for obj_id in object_ids:
        url = f"https://www.kv.ee/{obj_id}"
        print(f"Kraabin {url}")
        try:
            page.goto(url, timeout=20000)

            # Kontrollib kas lehekülg antud id kohta on olemas kui ei liigub edasi.
            if "Objekti ei leitud" in page.content():
                print(f"Jatab vahele {obj_id} — objekti ei leitud")
                continue
            # Hindade korjamine
            try:
                page.wait_for_selector("div.price-outer > div", timeout=5000)
                price = page.locator("div.price-outer > div").first.text_content().strip()
            except TimeoutError:
                print(f"Hinda ei leitud {url}")
                price = None
            #katastri numbrite korjamine igaks juhuks
            katastrinumber = None
            try:
                katastri_element = page.locator("th:has-text('Katastrinumber') + td a")
                if katastri_element.count() > 0:
                    katastrinumber = katastri_element.first.text_content().strip()
            except:
                pass

            # Koordinaatide korjamine Google Maps lingist
            latitude = longitude = None
            try:
                map_link = page.locator("div.map a")
                if map_link.count() > 0:
                    href = map_link.first.get_attribute("href")
                    match = re.search(r"query=([-+]?\d*\.\d+),([-+]?\d*\.\d+)", href) # sordib pärast href väärtust google lingist koordinaadid
                    if match:
                        latitude, longitude = match.groups()
            except Exception as e:
                print(f"Ei saanud koordinaate {url}: {e}")

            scraped_data.append({
                "id": obj_id,
                "price": price.strip() if price else None,
                "katastrinumber": katastrinumber,
                "latitude": latitude,
                "longitude": longitude,
                "url": url
            })

        except Exception as e:
            print(f"Ei suutnud kraapida {url}: {e}")

    browser.close()

# tulemuste salvestamine
with open("scraped_listings.json", "w", encoding="utf-8") as f:
    json.dump(scraped_data, f, ensure_ascii=False, indent=2)

print("Tehtud. Kraabitud andmed salvestati faili scraped_listings.json")